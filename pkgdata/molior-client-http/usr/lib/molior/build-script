#!/bin/sh

: ${BUILD_ID?"set BUILD_ID before running this script"}
: ${BUILD_TOKEN?"set BUILD_TOKEN before running this script"}
: ${PLATFORM?"set PLATFORM before running this script"}
: ${PLATFORM_VERSION?"set PLATFORM_VERSION before running this script"}
: ${ARCH?"set ARCH before running this script"}
: ${ARCH_ANY_ONLY?"set ARCH_ANY_ONLY before running this script"}
: ${REPO_NAME?"set REPO_NAME before running this script"}
: ${VERSION?"set VERSION before running this script"}
: ${PROJECT_DIST?"set PROJECT_DIST before running this script"}
: ${PROJECT?"set PROJECT before running this script"}
: ${PROJECTVERSION?"set PROJECTVERSION before running this script"}
: ${APT_SERVER?"set APT_SERVER before running this script"}
: ${APT_URLS?"set APT_URLS before running this script"}
: ${RUN_LINTIAN?"set RUN_LINTIAN before running this script"}

if [ -f /etc/default/molior-client ]; then
  . /etc/default/molior-client
fi

if [ -z "$MOLIOR_SERVER" ]; then
  MOLIOR_SERVER=172.16.0.254
fi

log_title ()
{
    message=$1
    shift
    if ! echo $@ | grep -q "no-header-newline"; then
      /bin/echo
    fi
    color=36
    if echo $@ | grep -q "error"; then
      color=31
    fi
    /bin/echo -e "\e[${color}m\e[1m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m"
    /bin/echo -en "\e[${color}m\e[1m"
    printf "| %-44s %s |" "molior: $message" "`date -R`"
    /bin/echo -e "\e[0m"
    /bin/echo -e "\e[${color}m\e[1m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m"
    if ! echo $@ | grep -q "no-footer-newline"; then
      /bin/echo
    fi
}

log ()
{
    message="$@"
    /bin/echo -e "$message"
}

log_error ()
{
    message="$@"
    /bin/echo -e "\e[31m\e[1m$message\e[0m"
}

unmount ()
{
    mpoint="$1"
    if [ -z "$mpoint" ]; then
        log_error "unmount(): no mountpoint specified"
        return
    fi
    shift

    log "* Unmounting $mpoint ($@)"
    if ! mountpoint -q "$mpoint"; then
        return
    fi
    for i in `seq 30`; do
        sudo umount "$mpoint"
        ret=$?
        if [ "$ret" -eq 0 ]; then
            return
        fi
        sleep 10
    done
    log_error "Could not unmount $mpoint"
    fuser -muv $mpoint
    return 1
}

finish ()
{
    RET=$?  # must be first
    set +e
    log "\nCleanup:"
    cd / # step out of mounted directories
    log " - deleting schroot session"
    schroot --all-sessions -e
    log " - cleaning up /var/lib/sbuild/build"
    sudo rm -rf /var/lib/sbuild/build/*
    log " - cleaning up /var/lib/schroot/chroots"
    sudo rm -rf /var/lib/schroot/chroots/$PLATFORM-$PLATFORM_VERSION-$ARCH
    sudo rm -f /etc/schroot/chroot.d/sbuild-$PLATFORM-$PLATFORM_VERSION-$ARCH

    rm -f ~/build/*

    if [ $RET -ne 0 ]; then
      log_title "Building failed" no-footer-newline error
    fi
    exit $RET
}
trap finish EXIT

log_title "Molior Build" no-header-newline

log "Building: $REPO_NAME $VERSION"
log "Platform: $PLATFORM/$PLATFORM_VERSION $ARCH"
log "Build ID: $BUILD_ID"
log "Builder : `hostname`"
echo

log "APT Sources:"
wget -q -O- $MOLIOR_SERVER/api/projectsources/$PROJECT/$PROJECTVERSION | sed -e '/^#/d' -e '/^$/d' -e 's/^/ - /'
echo

cd # why are we not in $HOME ?

mkdir -p build
cd build

log "Downloading:"
sources_url="$APT_SERVER/$PLATFORM/$PLATFORM_VERSION/repos/$PROJECT/$PROJECTVERSION/dists/$PROJECT_DIST/main/source/Sources"
log " - $sources_url"
# FIXME: use curl, remove wget
pkgdir=`wget --timeout=30 -q -O- $sources_url | /usr/lib/molior/find-package-dir.pl $REPO_NAME $VERSION`
if [ -z "$pkgdir" ]; then
  echo "Directory for source package $REPO_NAME $VERSION not found"
  exit 1
fi

# strip epoch version
VERSION=`echo $VERSION | sed 's/^[0-9]\+://'`

dsc_url="$APT_SERVER/$PLATFORM/$PLATFORM_VERSION/repos/$PROJECT/$PROJECTVERSION/$pkgdir/${REPO_NAME}_$VERSION.dsc"
log " - $dsc_url"
wget --timeout=30 -q $dsc_url
if [ "$?" -ne 0 ]; then
  echo "Error downloading source package $dsc_url"
  exit 1
fi

for srcfile in `/usr/lib/molior/dsc-get-files.pl ${REPO_NAME}_$VERSION.dsc`
do
  src_url="$APT_SERVER/$PLATFORM/$PLATFORM_VERSION/repos/$PROJECT/$PROJECTVERSION/$pkgdir/$srcfile"
  log " - $src_url"
  wget --timeout=30 -q $src_url
done

echo
echo -n "Validating "
dscverify --no-default-keyrings --keyring ~/.gnupg/trustedkeys.gpg ${REPO_NAME}_$VERSION.dsc | sed -e 's/^ \+/ - /' -e 's/^All/ - All/'
if [ "$?" -ne 0 ]; then
  echo "Error: invalid source signature"
  exit 1
fi

CLEANUP_SCHROOT=0
if [ ! -e /var/lib/schroot/chroots/chroot.d/sbuild-$PLATFORM-$PLATFORM_VERSION-$ARCH ]; then
  CLEANUP_SCHROOT=1
  SCHROOT_URL=http://$MOLIOR_SERVER/schroots/
  log "- $SCHROOT_URL/$PLATFORM-$PLATFORM_VERSION-$ARCH.tar.xz"
  wget --timeout=30 -q $SCHROOT_URL/chroot.d/sbuild-$PLATFORM-$PLATFORM_VERSION-$ARCH
  wget --timeout=30 -q $SCHROOT_URL/$PLATFORM-$PLATFORM_VERSION-$ARCH.tar.xz

  #FIXME: move to separate installschroot.sh, allow sudo only for this script
  sudo mv sbuild-$PLATFORM-$PLATFORM_VERSION-$ARCH /etc/schroot/chroot.d/
  sudo mkdir -p /var/lib/schroot/chroots/
  sudo mv $PLATFORM-$PLATFORM_VERSION-$ARCH.tar.xz /var/lib/schroot/chroots/
else
  sudo cp /var/lib/schroot/chroots/chroot.d/sbuild-$PLATFORM-$PLATFORM_VERSION-$ARCH /etc/schroot/chroot.d/
fi

echo
log "Extracting schroot: $PLATFORM-$PLATFORM_VERSION-$ARCH.tar.xz"
sudo rm -rf   /var/lib/schroot/chroots/$PLATFORM-$PLATFORM_VERSION-$ARCH
sudo mkdir -p /var/lib/schroot/chroots/$PLATFORM-$PLATFORM_VERSION-$ARCH
cd /var/lib/schroot/chroots/$PLATFORM-$PLATFORM_VERSION-$ARCH/
sudo XZ_OPT="--threads=`nproc --ignore=1`" tar -xJf ../$PLATFORM-$PLATFORM_VERSION-$ARCH.tar.xz
cd - >/dev/null
sudo chown root:root /etc/schroot/chroot.d/sbuild-$PLATFORM-$PLATFORM_VERSION-$ARCH

if [ $CLEANUP_SCHROOT -eq 1 ]; then
  sudo rm -f /var/lib/schroot/chroots/$PLATFORM-$PLATFORM_VERSION-$ARCH.tar.xz
fi

log_title "Running sbuild"

if [ "$ARCH_ANY_ONLY" = "1" ]; then
    SBUILD_ARCH_ARGS="--no-arch-all --arch=$ARCH"
else
    SBUILD_ARCH_ARGS="--arch-all --arch=$ARCH"
fi

if [ "$RUN_LINTIAN" != "1" ]; then
    SBUILD_ARGS="--no-run-lintian"
fi

# FIXME: signature verification inside sbuild schroot

APT_KEYS=""
# FIXME: add extra keys from external repositories
# --extra-repository-key=

eval sbuild $SBUILD_ARGS -d $PLATFORM-$PLATFORM_VERSION \
            --purge=never --verbose --run-lintian --no-clean-source --no-apt-clean --build-dep-resolver=aptitude \
            $SBUILD_ARCH_ARGS \
            $APT_URLS \
            $APT_KEYS \
            ${REPO_NAME}_$VERSION.dsc
RET=$?

if [ "$RET" -ne 0 ]; then
  log_error "Error: sbuild command failed"
  exit $RET
fi

if [ ! -f "${REPO_NAME}_${VERSION}_$ARCH.changes" ]; then
    log_error "Error: debian changes file not found: ${REPO_NAME}_${VERSION}_$ARCH.changes"
    exit 101
fi

log_title "Uploading"
# FIXME: parse changes files

rm -f ${REPO_NAME}_${VERSION}_$ARCH.build
OUTPUT_FILES=`find . -maxdepth 1 -name "*.deb" -o -name "*.build" -o -name "*_$ARCH.buildinfo" -o -name "*_$ARCH.changes"`

log "Uploading: "
for f in $OUTPUT_FILES
do
  log " * `echo $f | sed 's#^./##'`"
  curl -fs -F "file=@$f" http://$MOLIOR_SERVER/internal/buildupload/$BUILD_TOKEN >/dev/null
  if [ $? -ne 0 ]; then
    log_error "Error uploading output files"
    exit 2
  fi
done

